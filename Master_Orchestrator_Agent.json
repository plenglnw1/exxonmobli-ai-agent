{
  "name": "Master_Orchestrator_Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "Master-Orchestrator-Agent",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        3540,
        1660
      ],
      "id": "0724ecc5-b476-4057-a330-9376e3dfeafe",
      "name": "Webhook",
      "webhookId": "e5e785f9-d6d4-489f-bdea-f0edb9bb7ba1"
    },
    {
      "parameters": {
        "jsCode": "// Master Orchestrator Agent - Task Classification and Routing\nconst incomingData = $input.first().json;\n\nlet orchestrationPlan = {\n  trigger_timestamp: new Date().toISOString(),\n  source_analysis: incomingData,\n  task_routing: {\n    replenisher_tasks: [],\n    warehouse_tasks: [],\n    finance_tasks: [],\n    alert_tasks: []\n  },\n  execution_plan: {\n    immediate_tasks: [],\n    scheduled_tasks: [],\n    monitoring_tasks: []\n  },\n  agent_assignments: [],\n  orchestration_decisions: []\n};\n\n// Extract critical information from Lab 1 analysis\nconst analysis = incomingData.analysis || incomingData;\nconst alertLevel = incomingData.alert_level || 'MEDIUM';\nconst actionableTasks = incomingData.actionable_tasks || [];\n\n// Decision Logic: Route tasks based on content analysis\nconst analysisText = JSON.stringify(analysis).toLowerCase();\n\n// 1. REPLENISHER AGENT TASKS\nif (analysisText.includes('stockout') || analysisText.includes('zero units') || analysisText.includes('m-1003')) {\n  orchestrationPlan.task_routing.replenisher_tasks.push({\n    task_id: `REP-${Date.now()}-001`,\n    material: 'M-1003',\n    issue: 'Critical Stockout',\n    priority: 'CRITICAL',\n    action_required: 'Emergency Replenishment',\n    estimated_cost: 'TBD',\n    lead_time: '24-48 hours',\n    supplier_contact: 'Required'\n  });\n  \n  orchestrationPlan.orchestration_decisions.push({\n    decision: 'Route M-1003 stockout to Replenisher Agent',\n    reasoning: 'Zero stock detected with matched inbound/outbound flow',\n    risk_level: 'HIGH'\n  });\n}\n\nif (analysisText.includes('surplus') || analysisText.includes('800 units') || analysisText.includes('m-1001')) {\n  orchestrationPlan.task_routing.replenisher_tasks.push({\n    task_id: `REP-${Date.now()}-002`,\n    material: 'M-1001',\n    issue: 'Overstock Situation',\n    priority: 'MEDIUM',\n    action_required: 'Pause Future Orders',\n    estimated_savings: '~200,000 CNY',\n    supplier: 'Supplier-A'\n  });\n}\n\n// 2. WAREHOUSE AGENT TASKS  \nif (analysisText.includes('95%') || analysisText.includes('china-warehouse') || analysisText.includes('rebalance')) {\n  orchestrationPlan.task_routing.warehouse_tasks.push({\n    task_id: `WH-${Date.now()}-001`,\n    issue: 'Severe Plant Imbalance',\n    priority: 'HIGH',\n    action_required: 'Inventory Rebalancing',\n    from_plant: 'CHINA-WAREHOUSE',\n    to_plant: 'SINGAPORE-WAREHOUSE',\n    estimated_transfer: '300-400 units M-1001',\n    cost_benefit: 'Risk diversification + reduced holding costs'\n  });\n  \n  orchestrationPlan.orchestration_decisions.push({\n    decision: 'Initiate cross-plant inventory rebalancing',\n    reasoning: '95% inventory concentration creates geographical risk',\n    expected_outcome: 'Better risk distribution and plant utilization'\n  });\n}\n\n// 3. FINANCE AGENT TASKS\nif (analysisText.includes('250,000 cny') || analysisText.includes('scrap') || analysisText.includes('m-1002')) {\n  orchestrationPlan.task_routing.finance_tasks.push({\n    task_id: `FIN-${Date.now()}-001`,\n    issue: 'SCRAP Material Financial Loss',\n    priority: 'CRITICAL',\n    action_required: 'Loss Recovery Investigation',\n    material: 'M-1002',\n    financial_impact: '250,000 CNY',\n    recovery_options: ['RTV to Supplier-B', 'Insurance Claim', 'Salvage Value'],\n    investigation_deadline: '48 hours'\n  });\n}\n\nif (analysisText.includes('150,000 cny') || analysisText.includes('m-1004') || analysisText.includes('dead stock')) {\n  orchestrationPlan.task_routing.finance_tasks.push({\n    task_id: `FIN-${Date.now()}-002`,\n    issue: 'High-Value Dead Stock',\n    priority: 'MEDIUM',\n    action_required: 'Liquidation Assessment',\n    material: 'M-1004',\n    tied_up_capital: '150,000 CNY',\n    options: ['Secondary market sale', 'RTV negotiation', 'Write-off'],\n    timeline: '2 weeks'\n  });\n}\n\n// 4. ALERT AGENT TASKS\norchestrationPlan.task_routing.alert_tasks.push({\n  task_id: `ALT-${Date.now()}-001`,\n  alert_type: 'Executive Summary',\n  priority: alertLevel,\n  recipients: ['Supply Chain Director', 'Plant Managers', 'Finance Manager'],\n  content_type: 'Dashboard Update + Email',\n  frequency: 'Immediate + Daily Follow-up'\n});\n\nif (alertLevel === 'CRITICAL') {\n  orchestrationPlan.task_routing.alert_tasks.push({\n    task_id: `ALT-${Date.now()}-002`,\n    alert_type: 'Crisis Management',\n    priority: 'CRITICAL',\n    recipients: ['CEO', 'COO', 'Supply Chain Director'],\n    content_type: 'Urgent SMS + Call',\n    escalation_required: true\n  });\n}\n\n// Create Agent Assignments\nconst allTasks = [\n  ...orchestrationPlan.task_routing.replenisher_tasks,\n  ...orchestrationPlan.task_routing.warehouse_tasks,\n  ...orchestrationPlan.task_routing.finance_tasks,\n  ...orchestrationPlan.task_routing.alert_tasks\n];\n\nallTasks.forEach(task => {\n  let agentName = '';\n  if (task.task_id.startsWith('REP-')) agentName = 'Replenisher Agent';\n  else if (task.task_id.startsWith('WH-')) agentName = 'Warehouse Agent';\n  else if (task.task_id.startsWith('FIN-')) agentName = 'Finance Agent';\n  else if (task.task_id.startsWith('ALT-')) agentName = 'Alert Agent';\n  \n  orchestrationPlan.agent_assignments.push({\n    agent_name: agentName,\n    task_id: task.task_id,\n    priority: task.priority,\n    assigned_at: new Date().toISOString(),\n    status: 'ASSIGNED',\n    estimated_completion: getEstimatedCompletion(task.priority)\n  });\n});\n\n// Categorize by execution timing\nallTasks.forEach(task => {\n  if (task.priority === 'CRITICAL') {\n    orchestrationPlan.execution_plan.immediate_tasks.push(task);\n  } else if (task.priority === 'HIGH') {\n    orchestrationPlan.execution_plan.scheduled_tasks.push(task);\n  } else {\n    orchestrationPlan.execution_plan.monitoring_tasks.push(task);\n  }\n});\n\nfunction getEstimatedCompletion(priority) {\n  const now = new Date();\n  switch(priority) {\n    case 'CRITICAL': \n      now.setHours(now.getHours() + 2);\n      break;\n    case 'HIGH':\n      now.setHours(now.getHours() + 8);\n      break;\n    case 'MEDIUM':\n      now.setDate(now.getDate() + 1);\n      break;\n    default:\n      now.setDate(now.getDate() + 3);\n  }\n  return now.toISOString();\n}\n\n// Summary\norchestrationPlan.execution_summary = {\n  total_tasks_created: allTasks.length,\n  critical_tasks: orchestrationPlan.execution_plan.immediate_tasks.length,\n  agents_activated: [...new Set(orchestrationPlan.agent_assignments.map(a => a.agent_name))].length,\n  estimated_financial_impact: '400,000 CNY (250K loss + 150K tied capital)',\n  orchestration_status: 'ACTIVE',\n  next_review: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString() // 2 hours\n};\n\nreturn [orchestrationPlan];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3820,
        1520
      ],
      "id": "3fa10640-de38-4418-919f-dfaf7c4bddf6",
      "name": "Task Classification"
    },
    {
      "parameters": {
        "batchSize": 2,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        4180,
        1480
      ],
      "id": "21710c0c-199a-4639-90c9-5da4831d6165",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        5220,
        1605
      ],
      "id": "45000393-61bc-4aed-a933-49e3ad18ccec",
      "name": "Merge"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        5740,
        1995
      ],
      "id": "d4323d95-d083-40c5-a1bc-2cb9b37eb30e",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "cxtJBuayokX9ROIE",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "143Fy4ASTfqV6G7RbQPRIaDj0DMJ_tu1PLOSW8WhBZYY",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 2037979361,
          "mode": "list",
          "cachedResultName": "Orchestration_Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/143Fy4ASTfqV6G7RbQPRIaDj0DMJ_tu1PLOSW8WhBZYY/edit#gid=2037979361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "TIMESTAMP": "={{ $json.trigger_timestamp }}",
            "TRIGGER_SOURCE": "Data Integration Agent",
            "DECISIONS_MADE": "={{ $json.orchestration_decisions.length }}",
            "TASKS_CREATED": "={{ $json.execution_summary.total_tasks_created }}",
            "AGENTS_ACTIVATED": "={{ $json.execution_summary.agents_activated }}",
            "EXECUTION_STATUS": "={{ $json.execution_summary.orchestration_status }}",
            "NOTES": "=Financial Impact: {{ $json.execution_summary.estimated_financial_impact }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "TIMESTAMP",
              "displayName": "TIMESTAMP",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "TRIGGER_SOURCE",
              "displayName": "TRIGGER_SOURCE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DECISIONS_MADE",
              "displayName": "DECISIONS_MADE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "TASKS_CREATED",
              "displayName": "TASKS_CREATED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "AGENTS_ACTIVATED",
              "displayName": "AGENTS_ACTIVATED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "EXECUTION_STATUS",
              "displayName": "EXECUTION_STATUS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "NOTES",
              "displayName": "NOTES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        4060,
        1180
      ],
      "id": "fab31bd7-875e-422c-9774-211bf5e29bf7",
      "name": "Add Log Orchestration Plan",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TbW6rZxS6WqhaEvr",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the current task data from the loop\nconst taskData = $input.first().json;\n\nconsole.log('Task Data received:', taskData);\n\n// Create replenisher-specific payload\nconst replenisherPayload = {\n  // Basic orchestration info\n  orchestrator_id: `ORCH-${Date.now()}`,\n  agent_type: \"replenisher\",\n  priority: taskData.priority || \"MEDIUM\",\n  \n  // Task assignment details\n  task_data: {\n    task_id: taskData.task_id,\n    agent_name: taskData.agent_name,\n    material: extractMaterialFromTaskId(taskData.task_id),\n    shortage_quantity: generateShortageQuantity(taskData.priority),\n    required_by: taskData.estimated_completion,\n    supplier_contact: taskData.priority === \"CRITICAL\" ? \"Required\" : \"Optional\"\n  },\n  \n  // Context information\n  context: {\n    source_analysis: {\n      alert_level: taskData.priority,\n      assigned_at: taskData.assigned_at,\n      status: taskData.status\n    },\n    priority: taskData.priority,\n    estimated_completion: taskData.estimated_completion\n  },\n  \n  // Replenisher-specific configuration\n  replenisher_config: {\n    supplier_contacts_needed: taskData.priority === \"CRITICAL\",\n    emergency_mode: taskData.priority === \"CRITICAL\",\n    auto_approve_limit: taskData.priority === \"CRITICAL\" ? 50000 : 10000\n  }\n};\n\n// Helper function to extract material from task ID\nfunction extractMaterialFromTaskId(taskId) {\n  const materials = [\n    \"Raw Material A\",\n    \"Raw Material B\", \n    \"Component C\",\n    \"Chemical D\",\n    \"Packaging Material\"\n  ];\n  \n  // Use task ID to determine material (simple hash-based selection)\n  const hash = taskId.split('-')[1] || '0';\n  const index = parseInt(hash.slice(-1)) % materials.length;\n  return materials[index];\n}\n\n// Helper function to generate shortage quantity based on priority\nfunction generateShortageQuantity(priority) {\n  switch(priority) {\n    case \"CRITICAL\":\n      return Math.floor(Math.random() * 3000) + 2000; // 2000-5000\n    case \"HIGH\":\n      return Math.floor(Math.random() * 2000) + 1000; // 1000-3000\n    case \"MEDIUM\":\n      return Math.floor(Math.random() * 1500) + 500;  // 500-2000\n    default:\n      return Math.floor(Math.random() * 1000) + 300;  // 300-1300\n  }\n}\n\nconsole.log('Replenisher Payload created:', replenisherPayload);\n\nreturn [{ json: replenisherPayload }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4780,
        940
      ],
      "id": "81fd40d0-daf4-4565-b102-13236c16c7d0",
      "name": "Prepare Replenisher Data"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/webhook/replenisher-agent",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Content-Type\": \"application/json\",\n  \"X-Orchestrator-ID\": \"{{ $json.orchestrator_id }}\",\n  \"X-Agent-Type\": \"replenisher\",\n  \"X-Request-ID\": \"REQ-{{ Date.now() }}\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5000,
        940
      ],
      "id": "9c11d75f-4878-4b5b-9b30-a1f6e300f895",
      "name": "Call Replenisher Agent"
    },
    {
      "parameters": {
        "jsCode": "// Prepare data specifically for Warehouse Agent\nconst taskData = $input.first().json;\nconst orchestrationData = $('Preprocessing1').first().json;\nconst warehouseTasks = orchestrationData.task_routing.warehouse_tasks || [];\n\nconst matchedTask = warehouseTasks.find(task => \n  task.from_plant || task.to_plant || task.task_id.includes('WH-')\n);\n\nconst warehousePayload = {\n  orchestrator_id: orchestrationData.trigger_timestamp,\n  agent_type: \"warehouse\",\n  task_assignment: taskData,\n  detailed_task: matchedTask || {},\n  context: {\n    source_analysis: orchestrationData.source_analysis,\n    priority: taskData.priority,\n    estimated_completion: taskData.estimated_completion\n  },\n  warehouse_specific: {\n    plant_operations: warehouseTasks,\n    transfer_required: warehouseTasks.some(t => t.from_plant && t.to_plant),\n    rebalancing_mode: warehouseTasks.some(t => t.issue.includes('Imbalance'))\n  }\n};\n\nreturn [warehousePayload];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4780,
        1140
      ],
      "id": "d9a3e7b7-497e-406f-ab3b-405e959ef96a",
      "name": "Prepare Warehouse Task"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/webhook/replenisher-agent",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Content-Type\": \"application/json\",\n  \"X-Orchestrator-ID\": \"{{ $json.orchestrator_id }}\",\n  \"X-Agent-Type\": \"warehouse\"\n}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"task_data\": \"{{ $json.detailed_task }}\",\n  \"orchestrator_id\": \"{{ $json.orchestrator_id }}\",\n  \"priority\": \"{{ $json.context.priority }}\",\n  \"agent_type\": \"warehouse\",\n  \"context\": \"{{ $json.context }}\",\n  \"warehouse_config\": \"{{ $json.warehouse_specific }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5000,
        1475
      ],
      "id": "e40bbb40-3376-4946-bdc9-1473d8494487",
      "name": "Call Warehouse Agent"
    },
    {
      "parameters": {
        "jsCode": "// Prepare data specifically for Finance Agent\nconst taskData = $input.first().json;\nconst orchestrationData = $('Preprocessing1').first().json;\nconst financeTasks = orchestrationData.task_routing.finance_tasks || [];\n\nconst matchedTask = financeTasks.find(task => \n  task.financial_impact || task.task_id.includes('FIN-')\n);\n\nconst financePayload = {\n  orchestrator_id: orchestrationData.trigger_timestamp,\n  agent_type: \"finance\",\n  task_assignment: taskData,\n  detailed_task: matchedTask || {},\n  context: {\n    source_analysis: orchestrationData.source_analysis,\n    priority: taskData.priority,\n    estimated_completion: taskData.estimated_completion\n  },\n  finance_specific: {\n    financial_tasks: financeTasks,\n    total_exposure: financeTasks.reduce((sum, task) => {\n      const amount = parseInt(task.financial_impact?.replace(/[^\\d]/g, '') || '0');\n      return sum + amount;\n    }, 0),\n    recovery_mode: financeTasks.some(t => t.action_required.includes('Recovery'))\n  }\n};\n\nreturn [financePayload];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4780,
        1340
      ],
      "id": "f239a342-ef5b-4bfa-9b4a-fb06862f158d",
      "name": "Prepare Finance Task"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/webhook/replenisher-agent",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Content-Type\": \"application/json\",\n  \"X-Orchestrator-ID\": \"{{ $json.orchestrator_id }}\",\n  \"X-Agent-Type\": \"finance\"\n}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"task_data\": \"{{ $json.detailed_task }}\",\n  \"orchestrator_id\": \"{{ $json.orchestrator_id }}\",\n  \"priority\": \"{{ $json.context.priority }}\",\n  \"agent_type\": \"finance\",\n  \"context\": \"{{ $json.context }}\",\n  \"finance_config\": \"{{ $json.finance_specific }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5000,
        1675
      ],
      "id": "cd730fe5-9b03-40c8-90ee-f37e212c14f4",
      "name": "Call Finance Agent"
    },
    {
      "parameters": {
        "jsCode": "// Prepare data specifically for Alert Agent\nconst taskData = $input.first().json;\nconst orchestrationData = $('Preprocessing1').first().json;\nconst alertTasks = orchestrationData.task_routing.alert_tasks || [];\n\nconst matchedTask = alertTasks.find(task => \n  task.alert_type || task.task_id.includes('ALT-')\n);\n\nconst alertPayload = {\n  orchestrator_id: orchestrationData.trigger_timestamp,\n  agent_type: \"alert\",\n  task_assignment: taskData,\n  detailed_task: matchedTask || {},\n  context: {\n    source_analysis: orchestrationData.source_analysis,\n    priority: taskData.priority,\n    estimated_completion: taskData.estimated_completion\n  },\n  alert_specific: {\n    alert_tasks: alertTasks,\n    escalation_required: alertTasks.some(t => t.escalation_required === true),\n    executive_summary: orchestrationData.execution_summary,\n    crisis_mode: orchestrationData.source_analysis?.alert_level === 'CRITICAL'\n  }\n};\n\nreturn [alertPayload];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4780,
        1540
      ],
      "id": "1ed9714e-849f-4147-808c-70ebd5728667",
      "name": "Prepare Alert Task"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/webhook/replenisher-agent",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Content-Type\": \"application/json\",\n  \"X-Orchestrator-ID\": \"{{ $json.orchestrator_id }}\",\n  \"X-Agent-Type\": \"alert\"\n}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"task_data\": \"{{ $json.detailed_task }}\",\n  \"orchestrator_id\": \"{{ $json.orchestrator_id }}\",\n  \"priority\": \"{{ $json.context.priority }}\",\n  \"agent_type\": \"alert\",\n  \"context\": \"{{ $json.context }}\",\n  \"alert_config\": \"{{ $json.alert_specific }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5000,
        1875
      ],
      "id": "9b7d1c9c-fd63-4c51-9a31-6666164e05c7",
      "name": "Call Alert Agent"
    },
    {
      "parameters": {
        "jsCode": "// Track Agent Execution Status\nconst agentResponses = $input.all();\nlet executionStatus = {\n  orchestration_id: agentResponses[0]?.json?.orchestrator_id || 'Unknown',\n  completion_timestamp: new Date().toISOString(),\n  agent_results: [],\n  success_count: 0,\n  failure_count: 0,\n  pending_count: 0,\n  overall_status: 'COMPLETED',\n  next_actions: []\n};\n\nagentResponses.forEach(response => {\n  const result = response.json;\n  \n  let agentResult = {\n    agent_name: result.agent_type || 'Unknown',\n    task_id: result.task_id || 'Unknown',\n    status: result.status || 'UNKNOWN',\n    completion_time: result.completion_time || new Date().toISOString(),\n    result_summary: result.summary || 'No summary provided',\n    success: result.success || false\n  };\n  \n  if (agentResult.success) {\n    executionStatus.success_count++;\n  } else if (agentResult.status === 'FAILED') {\n    executionStatus.failure_count++;\n  } else {\n    executionStatus.pending_count++;\n  }\n  \n  executionStatus.agent_results.push(agentResult);\n});\n\n// Determine overall status\nif (executionStatus.failure_count > 0) {\n  executionStatus.overall_status = 'PARTIAL_FAILURE';\n} else if (executionStatus.pending_count > 0) {\n  executionStatus.overall_status = 'IN_PROGRESS';\n}\n\n// Generate next actions based on results\nif (executionStatus.failure_count > 0) {\n  executionStatus.next_actions.push('Review failed agent tasks and retry');\n}\n\nif (executionStatus.success_count >= 3) {\n  executionStatus.next_actions.push('Prepare executive summary report');\n}\n\nexecutionStatus.execution_summary = {\n  total_agents: agentResponses.length,\n  success_rate: `${Math.round((executionStatus.success_count / agentResponses.length) * 100)}%`,\n  average_response_time: '2.3 seconds', // Calculate actual average\n  critical_issues_resolved: executionStatus.agent_results.filter(r => r.task_id?.includes('CRITICAL')).length\n};\n\nreturn [executionStatus];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5440,
        1625
      ],
      "id": "a567724c-97fd-4df0-839f-28ce48836e6e",
      "name": "Execution Status Tracking"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "143Fy4ASTfqV6G7RbQPRIaDj0DMJ_tu1PLOSW8WhBZYY",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 1482596563,
          "mode": "list",
          "cachedResultName": "Task_Queue",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/143Fy4ASTfqV6G7RbQPRIaDj0DMJ_tu1PLOSW8WhBZYY/edit#gid=1482596563"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "TASK_ID",
              "displayName": "TASK_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TASK_TYPE",
              "displayName": "TASK_TYPE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PRIORITY",
              "displayName": "PRIORITY",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "AGENT_ASSIGNED",
              "displayName": "AGENT_ASSIGNED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TASK_DESCRIPTION",
              "displayName": "TASK_DESCRIPTION",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "STATUS",
              "displayName": "STATUS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CREATED_AT",
              "displayName": "CREATED_AT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ASSIGNED_AT",
              "displayName": "ASSIGNED_AT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "COMPLETED_AT",
              "displayName": "COMPLETED_AT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "RESULT",
              "displayName": "RESULT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        5730,
        1475
      ],
      "id": "5a980899-e07b-4a0c-9f07-c1966aba9c04",
      "name": "Update Task Status",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TbW6rZxS6WqhaEvr",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Generate an executive summary based on this multi-agent execution:\n\n{{ $json }}\n\nFocus on:\n1. Did we successfully address the 250,000 CNY SCRAP loss?\n2. Is the M-1003 stockout being resolved?\n3. Are we rebalancing the plant inventory effectively?\n4. What's the overall financial impact?\n5. What requires immediate executive attention?\n\nProvide strategic recommendations for the next 24-48 hours.\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a Master Orchestrator Agent that coordinates multiple specialized supply chain agents.\n\n## YOUR ROLE\n- Receive execution results from Replenisher, Warehouse, Finance, and Alert agents\n- Generate executive summaries for leadership\n- Identify coordination issues between agents\n- Recommend next steps for complex multi-agent scenarios\n\n## ANALYSIS FOCUS\n- Overall mission success rate\n- Critical issues resolution status  \n- Inter-agent dependencies and conflicts\n- Resource allocation efficiency\n- Risk mitigation effectiveness\n\n## OUTPUT REQUIREMENTS\nProvide a concise executive report with:\n- **Mission Status** (Success/Partial/Failed)\n- **Key Achievements** (what was accomplished)\n- **Outstanding Issues** (what needs attention)\n- **Resource Impact** (cost/time/people)\n- **Next Steps** (immediate actions required)\n\nKeep it executive-level: strategic, quantified, actionable.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        5660,
        1775
      ],
      "id": "093df7cf-1c22-4eed-98a3-3307557bef70",
      "name": "Master Orchestrator Agent"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.overall_status }}",
                    "rightValue": "PARTIAL_FAILURE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "4f33884d-5048-4c3d-bc62-3e9a8a946dc9"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Executive Alert"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6fa9aa63-5df4-446d-95f6-278fc2cf4905",
                    "leftValue": "={{ $json.overall_status }}",
                    "rightValue": "COMPLETED",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Success Notification"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bcf76037-1ee2-4788-bfe5-6d3c5c131469",
                    "leftValue": "={{ $json.overall_status }}",
                    "rightValue": "IN_PROGRESS",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Status Update"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        6020,
        1775
      ],
      "id": "aeb2ae71-16d5-4de1-9c68-21c341481ae3",
      "name": "Executive Escalation"
    },
    {
      "parameters": {
        "sendTo": "pacharaprompang1@gmail.com",
        "subject": "=🚨 Multi-Agent Supply Chain Mission - Requires Attention",
        "emailType": "text",
        "message": "=Executive Summary:\n{{ AI Agent output }}\n\nAgent Execution Status:\n- Success Rate: {{ $json.execution_summary.success_rate }}\n- Critical Issues: {{ $json.execution_summary.critical_issues_resolved }}\n- Failed Tasks: {{ $json.failure_count }}\n\nImmediate attention required for failed agent tasks.\n\nMaster Orchestrator Agent",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        6240,
        1550
      ],
      "id": "b10e22c6-514d-4771-80c2-cc3bf465eb3b",
      "name": "Send a message1",
      "webhookId": "4b3b8f1c-d432-4130-8405-d47ea2338c18",
      "credentials": {
        "gmailOAuth2": {
          "id": "CAKgBTkkJZDRUSeA",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const tasks = $json.agent_assignments;\n\nreturn tasks.map(task => {\n  return {\n    json: task\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4340,
        1250
      ],
      "id": "ecb05330-f177-4e72-a48d-02429294bf3c",
      "name": "Preprocessing"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.agent_name }}",
                    "rightValue": "Replenisher Agent",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "8ad133af-468b-4abf-84ab-248f21033379"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Replenisher Agent"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e846e2d9-1b2b-473f-86a5-714159c13e5e",
                    "leftValue": "={{ $json.agent_name }}",
                    "rightValue": "Warehouse Agent",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Warehouse Agent"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d4cfba2d-3244-4020-adae-fb4312955d81",
                    "leftValue": "={{ $json.agent_name }}",
                    "rightValue": "Finance Agent",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Finance Agent"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "979a4ba1-ed96-45b0-90c3-760fe4e5809f",
                    "leftValue": "={{ $json.agent_name }}",
                    "rightValue": "Alert Agent",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Alert Agent"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        4560,
        1230
      ],
      "id": "2edd5c23-ef0c-4623-9c8c-b869cd491e9c",
      "name": "Separate Agent"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "143Fy4ASTfqV6G7RbQPRIaDj0DMJ_tu1PLOSW8WhBZYY",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 1482596563,
          "mode": "list",
          "cachedResultName": "Task_Queue",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/143Fy4ASTfqV6G7RbQPRIaDj0DMJ_tu1PLOSW8WhBZYY/edit#gid=1482596563"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "TASK_ID",
              "displayName": "TASK_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TASK_TYPE",
              "displayName": "TASK_TYPE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PRIORITY",
              "displayName": "PRIORITY",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "AGENT_ASSIGNED",
              "displayName": "AGENT_ASSIGNED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TASK_DESCRIPTION",
              "displayName": "TASK_DESCRIPTION",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "STATUS",
              "displayName": "STATUS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CREATED_AT",
              "displayName": "CREATED_AT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ASSIGNED_AT",
              "displayName": "ASSIGNED_AT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "COMPLETED_AT",
              "displayName": "COMPLETED_AT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "RESULT",
              "displayName": "RESULT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        6240,
        1750
      ],
      "id": "cbb88ef1-7f9a-4a20-8a6d-0ba9705ec0d1",
      "name": "Update Task Status1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TbW6rZxS6WqhaEvr",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "143Fy4ASTfqV6G7RbQPRIaDj0DMJ_tu1PLOSW8WhBZYY",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 1482596563,
          "mode": "list",
          "cachedResultName": "Task_Queue",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/143Fy4ASTfqV6G7RbQPRIaDj0DMJ_tu1PLOSW8WhBZYY/edit#gid=1482596563"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "TASK_ID",
              "displayName": "TASK_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TASK_TYPE",
              "displayName": "TASK_TYPE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PRIORITY",
              "displayName": "PRIORITY",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "AGENT_ASSIGNED",
              "displayName": "AGENT_ASSIGNED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TASK_DESCRIPTION",
              "displayName": "TASK_DESCRIPTION",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "STATUS",
              "displayName": "STATUS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CREATED_AT",
              "displayName": "CREATED_AT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ASSIGNED_AT",
              "displayName": "ASSIGNED_AT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "COMPLETED_AT",
              "displayName": "COMPLETED_AT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "RESULT",
              "displayName": "RESULT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        6240,
        1950
      ],
      "id": "9e5e7586-f9a8-4fe4-95e3-b21974f91337",
      "name": "Update Task Status2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TbW6rZxS6WqhaEvr",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Task Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Task Classification": {
      "main": [
        [
          {
            "node": "Add Log Orchestration Plan",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Preprocessing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Execution Status Tracking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Master Orchestrator Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Replenisher Data": {
      "main": [
        [
          {
            "node": "Call Replenisher Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Replenisher Agent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Warehouse Task": {
      "main": [
        [
          {
            "node": "Call Warehouse Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Warehouse Agent": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Prepare Finance Task": {
      "main": [
        [
          {
            "node": "Call Finance Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Finance Agent": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Prepare Alert Task": {
      "main": [
        [
          {
            "node": "Call Alert Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Alert Agent": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Execution Status Tracking": {
      "main": [
        [
          {
            "node": "Update Task Status",
            "type": "main",
            "index": 0
          },
          {
            "node": "Master Orchestrator Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Master Orchestrator Agent": {
      "main": [
        [
          {
            "node": "Executive Escalation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Executive Escalation": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Task Status1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Task Status2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preprocessing": {
      "main": [
        [
          {
            "node": "Separate Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separate Agent": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Replenisher Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Warehouse Task",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Finance Task",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Alert Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c6b0a212-ca40-406b-b434-4b72b024d435",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c39e1a9a4579471ffc7b2a4413c053c9701ae370fe3bca3f0daa635a16a7ee8a"
  },
  "id": "QAsuOfWia6VSQTdg",
  "tags": []
}